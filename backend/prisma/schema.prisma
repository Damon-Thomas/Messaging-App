// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @unique @default(uuid())
  username         String         @unique
  password         String
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  groups           UserGroup[]
  friends          UserFriend[]   @relation("UsertoFriend")
  Profile          Profile[]
  lastLogin        DateTime       @default(now())
  UserFriend       UserFriend[]
  
}

model Message {
  id            String         @id @unique @default(uuid())
  createdAt     DateTime       @default(now())
  content       String?        @db.VarChar(255)
  authorId      String
  author        User           @relation("SentMessages", fields: [authorId], references: [id])
  username      String
  sentToId      String?
  sentTo        User?          @relation("ReceivedMessages", fields: [sentToId], references: [id])
  sentToGroupId String?
  sentToGroup   Group?         @relation("GroupMessages", fields: [sentToGroupId], references: [id])
}

model Group {
  id        String      @id @unique @default(uuid())
  groupName String      @unique
  createdAt DateTime    @default(now())
  members   UserGroup[]
  Message   Message[]   @relation("GroupMessages")
}

model UserGroup {
  userId   String
  groupId  String
  user     User     @relation(fields: [userId], references: [id])
  group    Group    @relation(fields: [groupId], references: [id])
  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model UserFriend {
  userId   String
  friendId String
  user     User   @relation("UsertoFriend", fields: [userId], references: [id])
  friend   User   @relation(fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model Profile {
  id     String @id @unique
  bio    String @default("Bio")
  intro  String @default("Intro")
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}
